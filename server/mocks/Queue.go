// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	queue "github.com/J-Obog/paidoff/queue"
	mock "github.com/stretchr/testify/mock"
)

// Queue is an autogenerated mock type for the Queue type
type Queue struct {
	mock.Mock
}

// Ack provides a mock function with given fields: messageId
func (_m *Queue) Ack(messageId string) error {
	ret := _m.Called(messageId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(messageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with given fields: queueName
func (_m *Queue) Flush(queueName string) error {
	ret := _m.Called(queueName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(queueName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Pop provides a mock function with given fields: queueName
func (_m *Queue) Pop(queueName string) (*queue.Message, error) {
	ret := _m.Called(queueName)

	var r0 *queue.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*queue.Message, error)); ok {
		return rf(queueName)
	}
	if rf, ok := ret.Get(0).(func(string) *queue.Message); ok {
		r0 = rf(queueName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queue.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(queueName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Push provides a mock function with given fields: message, queueName
func (_m *Queue) Push(message queue.Message, queueName string) error {
	ret := _m.Called(message, queueName)

	var r0 error
	if rf, ok := ret.Get(0).(func(queue.Message, string) error); ok {
		r0 = rf(message, queueName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQueue creates a new instance of Queue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *Queue {
	mock := &Queue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
