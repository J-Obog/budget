// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	data "github.com/J-Obog/paidoff/data"
	mock "github.com/stretchr/testify/mock"
)

// Clock is an autogenerated mock type for the Clock type
type Clock struct {
	mock.Mock
}

// CurrentMonth provides a mock function with given fields:
func (_m *Clock) CurrentMonth() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// CurrentYear provides a mock function with given fields:
func (_m *Clock) CurrentYear() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// DateFromStamp provides a mock function with given fields: timestamp
func (_m *Clock) DateFromStamp(timestamp int64) data.Date {
	ret := _m.Called(timestamp)

	var r0 data.Date
	if rf, ok := ret.Get(0).(func(int64) data.Date); ok {
		r0 = rf(timestamp)
	} else {
		r0 = ret.Get(0).(data.Date)
	}

	return r0
}

// FromDate provides a mock function with given fields: date
func (_m *Clock) FromDate(date data.Date) int64 {
	ret := _m.Called(date)

	var r0 int64
	if rf, ok := ret.Get(0).(func(data.Date) int64); ok {
		r0 = rf(date)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// IsDateValid provides a mock function with given fields: date
func (_m *Clock) IsDateValid(date data.Date) bool {
	ret := _m.Called(date)

	var r0 bool
	if rf, ok := ret.Get(0).(func(data.Date) bool); ok {
		r0 = rf(date)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Now provides a mock function with given fields:
func (_m *Clock) Now() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// NewClock creates a new instance of Clock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClock(t interface {
	mock.TestingT
	Cleanup(func())
}) *Clock {
	mock := &Clock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
