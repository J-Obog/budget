// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	data "github.com/J-Obog/paidoff/data"
	mock "github.com/stretchr/testify/mock"
)

// AccountStore is an autogenerated mock type for the AccountStore type
type AccountStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *AccountStore) Delete(id string) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAll provides a mock function with given fields:
func (_m *AccountStore) DeleteAll() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *AccountStore) Get(id string) (*data.Account, error) {
	ret := _m.Called(id)

	var r0 *data.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*data.Account, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *data.Account); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: account
func (_m *AccountStore) Insert(account data.Account) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(data.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDeleted provides a mock function with given fields: id
func (_m *AccountStore) SetDeleted(id string) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, update, timestamp
func (_m *AccountStore) Update(id string, update data.AccountUpdate, timestamp int64) (bool, error) {
	ret := _m.Called(id, update, timestamp)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, data.AccountUpdate, int64) (bool, error)); ok {
		return rf(id, update, timestamp)
	}
	if rf, ok := ret.Get(0).(func(string, data.AccountUpdate, int64) bool); ok {
		r0 = rf(id, update, timestamp)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, data.AccountUpdate, int64) error); ok {
		r1 = rf(id, update, timestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountStore creates a new instance of AccountStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountStore {
	mock := &AccountStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
