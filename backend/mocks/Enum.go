// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Enum is an autogenerated mock type for the Enum type
type Enum[T interface{}] struct {
	mock.Mock
}

type Enum_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *Enum[T]) EXPECT() *Enum_Expecter[T] {
	return &Enum_Expecter[T]{mock: &_m.Mock}
}

// From provides a mock function with given fields:
func (_m *Enum[T]) From() {
	_m.Called()
}

// Enum_From_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'From'
type Enum_From_Call[T interface{}] struct {
	*mock.Call
}

// From is a helper method to define mock.On call
func (_e *Enum_Expecter[T]) From() *Enum_From_Call[T] {
	return &Enum_From_Call[T]{Call: _e.mock.On("From")}
}

func (_c *Enum_From_Call[T]) Run(run func()) *Enum_From_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Enum_From_Call[T]) Return() *Enum_From_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *Enum_From_Call[T]) RunAndReturn(run func()) *Enum_From_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewEnum creates a new instance of Enum. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnum[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Enum[T] {
	mock := &Enum[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
