// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	rest "github.com/J-Obog/paidoff/rest"
	mock "github.com/stretchr/testify/mock"
)

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

type Server_Expecter struct {
	mock *mock.Mock
}

func (_m *Server) EXPECT() *Server_Expecter {
	return &Server_Expecter{mock: &_m.Mock}
}

// RegisterRoute provides a mock function with given fields: method, url, rh
func (_m *Server) RegisterRoute(method string, url string, rh rest.RouteHandler) {
	_m.Called(method, url, rh)
}

// Server_RegisterRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterRoute'
type Server_RegisterRoute_Call struct {
	*mock.Call
}

// RegisterRoute is a helper method to define mock.On call
//   - method string
//   - url string
//   - rh rest.RouteHandler
func (_e *Server_Expecter) RegisterRoute(method interface{}, url interface{}, rh interface{}) *Server_RegisterRoute_Call {
	return &Server_RegisterRoute_Call{Call: _e.mock.On("RegisterRoute", method, url, rh)}
}

func (_c *Server_RegisterRoute_Call) Run(run func(method string, url string, rh rest.RouteHandler)) *Server_RegisterRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(rest.RouteHandler))
	})
	return _c
}

func (_c *Server_RegisterRoute_Call) Return() *Server_RegisterRoute_Call {
	_c.Call.Return()
	return _c
}

func (_c *Server_RegisterRoute_Call) RunAndReturn(run func(string, string, rest.RouteHandler)) *Server_RegisterRoute_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: address, port
func (_m *Server) Start(address string, port int) {
	_m.Called(address, port)
}

// Server_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Server_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - address string
//   - port int
func (_e *Server_Expecter) Start(address interface{}, port interface{}) *Server_Start_Call {
	return &Server_Start_Call{Call: _e.mock.On("Start", address, port)}
}

func (_c *Server_Start_Call) Run(run func(address string, port int)) *Server_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *Server_Start_Call) Return() *Server_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *Server_Start_Call) RunAndReturn(run func(string, int)) *Server_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *Server) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Server_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Server_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Server_Expecter) Stop() *Server_Stop_Call {
	return &Server_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Server_Stop_Call) Run(run func()) *Server_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Server_Stop_Call) Return(_a0 error) *Server_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Stop_Call) RunAndReturn(run func() error) *Server_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewServer creates a new instance of Server. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Server {
	mock := &Server{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
