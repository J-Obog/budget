// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	data "github.com/J-Obog/paidoff/data"
	mock "github.com/stretchr/testify/mock"
)

// CategoryStore is an autogenerated mock type for the CategoryStore type
type CategoryStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id, accountId
func (_m *CategoryStore) Delete(id string, accountId string) (bool, error) {
	ret := _m.Called(id, accountId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(id, accountId)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(id, accountId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAll provides a mock function with given fields:
func (_m *CategoryStore) DeleteAll() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id, accountId
func (_m *CategoryStore) Get(id string, accountId string) (*data.Category, error) {
	ret := _m.Called(id, accountId)

	var r0 *data.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*data.Category, error)); ok {
		return rf(id, accountId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *data.Category); ok {
		r0 = rf(id, accountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: accountId
func (_m *CategoryStore) GetAll(accountId string) ([]data.Category, error) {
	ret := _m.Called(accountId)

	var r0 []data.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]data.Category, error)); ok {
		return rf(accountId)
	}
	if rf, ok := ret.Get(0).(func(string) []data.Category); ok {
		r0 = rf(accountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]data.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: accountId, name
func (_m *CategoryStore) GetByName(accountId string, name string) (*data.Category, error) {
	ret := _m.Called(accountId, name)

	var r0 *data.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*data.Category, error)); ok {
		return rf(accountId, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *data.Category); ok {
		r0 = rf(accountId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accountId, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: category
func (_m *CategoryStore) Insert(category data.Category) error {
	ret := _m.Called(category)

	var r0 error
	if rf, ok := ret.Get(0).(func(data.Category) error); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: id, accountId, update, timestamp
func (_m *CategoryStore) Update(id string, accountId string, update data.CategoryUpdate, timestamp int64) (bool, error) {
	ret := _m.Called(id, accountId, update, timestamp)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, data.CategoryUpdate, int64) (bool, error)); ok {
		return rf(id, accountId, update, timestamp)
	}
	if rf, ok := ret.Get(0).(func(string, string, data.CategoryUpdate, int64) bool); ok {
		r0 = rf(id, accountId, update, timestamp)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, data.CategoryUpdate, int64) error); ok {
		r1 = rf(id, accountId, update, timestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCategoryStore creates a new instance of CategoryStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryStore {
	mock := &CategoryStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
