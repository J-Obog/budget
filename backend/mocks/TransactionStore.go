// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	data "github.com/J-Obog/paidoff/data"
	mock "github.com/stretchr/testify/mock"
)

// TransactionStore is an autogenerated mock type for the TransactionStore type
type TransactionStore struct {
	mock.Mock
}

type TransactionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionStore) EXPECT() *TransactionStore_Expecter {
	return &TransactionStore_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: id, accountId
func (_m *TransactionStore) Delete(id string, accountId string) (bool, error) {
	ret := _m.Called(id, accountId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(id, accountId)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(id, accountId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type TransactionStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
//   - accountId string
func (_e *TransactionStore_Expecter) Delete(id interface{}, accountId interface{}) *TransactionStore_Delete_Call {
	return &TransactionStore_Delete_Call{Call: _e.mock.On("Delete", id, accountId)}
}

func (_c *TransactionStore_Delete_Call) Run(run func(id string, accountId string)) *TransactionStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *TransactionStore_Delete_Call) Return(_a0 bool, _a1 error) *TransactionStore_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionStore_Delete_Call) RunAndReturn(run func(string, string) (bool, error)) *TransactionStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAll provides a mock function with given fields:
func (_m *TransactionStore) DeleteAll() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionStore_DeleteAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAll'
type TransactionStore_DeleteAll_Call struct {
	*mock.Call
}

// DeleteAll is a helper method to define mock.On call
func (_e *TransactionStore_Expecter) DeleteAll() *TransactionStore_DeleteAll_Call {
	return &TransactionStore_DeleteAll_Call{Call: _e.mock.On("DeleteAll")}
}

func (_c *TransactionStore_DeleteAll_Call) Run(run func()) *TransactionStore_DeleteAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TransactionStore_DeleteAll_Call) Return(_a0 error) *TransactionStore_DeleteAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionStore_DeleteAll_Call) RunAndReturn(run func() error) *TransactionStore_DeleteAll_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id, accountId
func (_m *TransactionStore) Get(id string, accountId string) (*data.Transaction, error) {
	ret := _m.Called(id, accountId)

	var r0 *data.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*data.Transaction, error)); ok {
		return rf(id, accountId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *data.Transaction); ok {
		r0 = rf(id, accountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type TransactionStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id string
//   - accountId string
func (_e *TransactionStore_Expecter) Get(id interface{}, accountId interface{}) *TransactionStore_Get_Call {
	return &TransactionStore_Get_Call{Call: _e.mock.On("Get", id, accountId)}
}

func (_c *TransactionStore_Get_Call) Run(run func(id string, accountId string)) *TransactionStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *TransactionStore_Get_Call) Return(_a0 *data.Transaction, _a1 error) *TransactionStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionStore_Get_Call) RunAndReturn(run func(string, string) (*data.Transaction, error)) *TransactionStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFilter provides a mock function with given fields: accountId, filter
func (_m *TransactionStore) GetByFilter(accountId string, filter data.TransactionFilter) ([]data.Transaction, error) {
	ret := _m.Called(accountId, filter)

	var r0 []data.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, data.TransactionFilter) ([]data.Transaction, error)); ok {
		return rf(accountId, filter)
	}
	if rf, ok := ret.Get(0).(func(string, data.TransactionFilter) []data.Transaction); ok {
		r0 = rf(accountId, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]data.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, data.TransactionFilter) error); ok {
		r1 = rf(accountId, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionStore_GetByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFilter'
type TransactionStore_GetByFilter_Call struct {
	*mock.Call
}

// GetByFilter is a helper method to define mock.On call
//   - accountId string
//   - filter data.TransactionFilter
func (_e *TransactionStore_Expecter) GetByFilter(accountId interface{}, filter interface{}) *TransactionStore_GetByFilter_Call {
	return &TransactionStore_GetByFilter_Call{Call: _e.mock.On("GetByFilter", accountId, filter)}
}

func (_c *TransactionStore_GetByFilter_Call) Run(run func(accountId string, filter data.TransactionFilter)) *TransactionStore_GetByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(data.TransactionFilter))
	})
	return _c
}

func (_c *TransactionStore_GetByFilter_Call) Return(_a0 []data.Transaction, _a1 error) *TransactionStore_GetByFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionStore_GetByFilter_Call) RunAndReturn(run func(string, data.TransactionFilter) ([]data.Transaction, error)) *TransactionStore_GetByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPeriodCategory provides a mock function with given fields: accountId, categoryId, month, year
func (_m *TransactionStore) GetByPeriodCategory(accountId string, categoryId string, month int, year int) ([]data.Transaction, error) {
	ret := _m.Called(accountId, categoryId, month, year)

	var r0 []data.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) ([]data.Transaction, error)); ok {
		return rf(accountId, categoryId, month, year)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) []data.Transaction); ok {
		r0 = rf(accountId, categoryId, month, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]data.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) error); ok {
		r1 = rf(accountId, categoryId, month, year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionStore_GetByPeriodCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPeriodCategory'
type TransactionStore_GetByPeriodCategory_Call struct {
	*mock.Call
}

// GetByPeriodCategory is a helper method to define mock.On call
//   - accountId string
//   - categoryId string
//   - month int
//   - year int
func (_e *TransactionStore_Expecter) GetByPeriodCategory(accountId interface{}, categoryId interface{}, month interface{}, year interface{}) *TransactionStore_GetByPeriodCategory_Call {
	return &TransactionStore_GetByPeriodCategory_Call{Call: _e.mock.On("GetByPeriodCategory", accountId, categoryId, month, year)}
}

func (_c *TransactionStore_GetByPeriodCategory_Call) Run(run func(accountId string, categoryId string, month int, year int)) *TransactionStore_GetByPeriodCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *TransactionStore_GetByPeriodCategory_Call) Return(_a0 []data.Transaction, _a1 error) *TransactionStore_GetByPeriodCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionStore_GetByPeriodCategory_Call) RunAndReturn(run func(string, string, int, int) ([]data.Transaction, error)) *TransactionStore_GetByPeriodCategory_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: transaction
func (_m *TransactionStore) Insert(transaction data.Transaction) error {
	ret := _m.Called(transaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(data.Transaction) error); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionStore_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type TransactionStore_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - transaction data.Transaction
func (_e *TransactionStore_Expecter) Insert(transaction interface{}) *TransactionStore_Insert_Call {
	return &TransactionStore_Insert_Call{Call: _e.mock.On("Insert", transaction)}
}

func (_c *TransactionStore_Insert_Call) Run(run func(transaction data.Transaction)) *TransactionStore_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(data.Transaction))
	})
	return _c
}

func (_c *TransactionStore_Insert_Call) Return(_a0 error) *TransactionStore_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionStore_Insert_Call) RunAndReturn(run func(data.Transaction) error) *TransactionStore_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NullCategoryId provides a mock function with given fields: id, accountId
func (_m *TransactionStore) NullCategoryId(id string, accountId string) (bool, error) {
	ret := _m.Called(id, accountId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(id, accountId)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(id, accountId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionStore_NullCategoryId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NullCategoryId'
type TransactionStore_NullCategoryId_Call struct {
	*mock.Call
}

// NullCategoryId is a helper method to define mock.On call
//   - id string
//   - accountId string
func (_e *TransactionStore_Expecter) NullCategoryId(id interface{}, accountId interface{}) *TransactionStore_NullCategoryId_Call {
	return &TransactionStore_NullCategoryId_Call{Call: _e.mock.On("NullCategoryId", id, accountId)}
}

func (_c *TransactionStore_NullCategoryId_Call) Run(run func(id string, accountId string)) *TransactionStore_NullCategoryId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *TransactionStore_NullCategoryId_Call) Return(_a0 bool, _a1 error) *TransactionStore_NullCategoryId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionStore_NullCategoryId_Call) RunAndReturn(run func(string, string) (bool, error)) *TransactionStore_NullCategoryId_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: updated
func (_m *TransactionStore) Update(updated data.Transaction) (bool, error) {
	ret := _m.Called(updated)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(data.Transaction) (bool, error)); ok {
		return rf(updated)
	}
	if rf, ok := ret.Get(0).(func(data.Transaction) bool); ok {
		r0 = rf(updated)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(data.Transaction) error); ok {
		r1 = rf(updated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type TransactionStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - updated data.Transaction
func (_e *TransactionStore_Expecter) Update(updated interface{}) *TransactionStore_Update_Call {
	return &TransactionStore_Update_Call{Call: _e.mock.On("Update", updated)}
}

func (_c *TransactionStore_Update_Call) Run(run func(updated data.Transaction)) *TransactionStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(data.Transaction))
	})
	return _c
}

func (_c *TransactionStore_Update_Call) Return(_a0 bool, _a1 error) *TransactionStore_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionStore_Update_Call) RunAndReturn(run func(data.Transaction) (bool, error)) *TransactionStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionStore creates a new instance of TransactionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionStore {
	mock := &TransactionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
